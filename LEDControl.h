/*#ifndef LEDCONTROL_H
#define LEDCONTROL_H

#include <ArduinoGraphics.h> 
#include <Arduino_LED_Matrix.h>

// Matrix dimensions
#define MATRIX_WIDTH 12
#define MATRIX_HEIGHT 8

// Create the GraphicsContext and RGBMatrix objects
ArduinoLEDMatrix  matrix(MATRIX_WIDTH, MATRIX_HEIGHT);

void initLEDMatrix() {
  matrix.begin();  // Initialize the LED matrix
  matrix.clear();  // Clear the matrix
  matrix.endDraw(); // Ensure the cleared state is displayed
}

// Function to set a specific pixel
void setPixelViewing(int row, int col, uint32_t color) {
  if (row < 0 || row >= MATRIX_HEIGHT || col < 0 || col >= MATRIX_WIDTH) return;

  matrix.beginDraw();  // Start a drawing session
  ctx.setPixel(col, row, color); // Set pixel color at the specified location
  matrix.endDraw();  // Render changes to the matrix
}

// Pump ON symbol
static uint32_t pumpOnImage[MATRIX_HEIGHT][MATRIX_WIDTH] = {
  {0x000000, 0x00FF00, 0x00FF00, 0x00FF00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000},
  {0x000000, 0x00FF00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000},
  {0x000000, 0x00FF00, 0x00FF00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000},
  {0x000000, 0x00FF00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000},
  {0x000000, 0x00FF00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000},
  {0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000},
  {0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000},
  {0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000},
};

// Pump OFF symbol
static uint32_t pumpOffImage[MATRIX_HEIGHT][MATRIX_WIDTH] = {
  {0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000},
  {0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000},
  {0x000000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000},
  {0x000000, 0x000000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000},
  {0x000000, 0x000000, 0x000000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000},
  {0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000},
  {0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xFF0000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000},
  {0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000},
};

// Display Pump ON image
void displayPumpOnSymbol() {
  matrix.beginDraw();
  for (int row = 0; row < MATRIX_HEIGHT; row++) {
    for (int col = 0; col < MATRIX_WIDTH; col++) {
      ctx.setPixel(col, row, pumpOnImage[row][col]);
    }
  }
  matrix.endDraw();
}

// Display Pump OFF image
void displayPumpOffSymbol() {
  matrix.beginDraw();
  for (int row = 0; row < MATRIX_HEIGHT; row++) {
    for (int col = 0; col < MATRIX_WIDTH; col++) {
      ctx.setPixel(col, row, pumpOffImage[row][col]);
    }
  }
  matrix.endDraw();
}

#endif // LEDCONTROL_H
*/